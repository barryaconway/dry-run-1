AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Photo Application

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        PHOTOS_TABLE: !Ref PhotosTable
        PHOTOS_BUCKET: !Ref PhotosBucket
        URL_EXPIRATION: 3600

Resources:
  # API Gateway HTTP API
  PhotosApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Environment
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowHeaders:
          - Content-Type
        AllowMethods:
          - GET
          - POST
          - OPTIONS

  # S3 Bucket for Photos
  PhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'serverless-photos-${AWS::AccountId}-${Environment}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldObjects
            Status: Enabled
            ExpirationInDays: 365

  # DynamoDB Table for Photo Metadata
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Photos-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: photoId
          AttributeType: S
      KeySchema:
        - AttributeName: photoId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Lambda Function for Uploading Photos
  UploadPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload_photo/
      Handler: app.lambda_handler
      Description: Uploads photos to S3 and saves metadata to DynamoDB
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PhotosBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
      Events:
        UploadPhoto:
          Type: HttpApi
          Properties:
            ApiId: !Ref PhotosApi
            Path: /photos
            Method: POST

  # Lambda Function for Getting Photos
  GetPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_photo/
      Handler: app.lambda_handler
      Description: Retrieves photo metadata and generates pre-signed URL
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref PhotosBucket
        - DynamoDBReadPolicy:
            TableName: !Ref PhotosTable
      Events:
        GetPhoto:
          Type: HttpApi
          Properties:
            ApiId: !Ref PhotosApi
            Path: /photos/{photoId}
            Method: GET

Outputs:
  PhotosApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${PhotosApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
  
  PhotosBucketName:
    Description: S3 bucket for photos
    Value: !Ref PhotosBucket
  
  PhotosTableName:
    Description: DynamoDB table for photo metadata
    Value: !Ref PhotosTable
  
  UploadPhotoFunction:
    Description: Upload Photo Lambda Function ARN
    Value: !GetAtt UploadPhotoFunction.Arn
  
  GetPhotoFunction:
    Description: Get Photo Lambda Function ARN
    Value: !GetAtt GetPhotoFunction.Arn